function heatmapReportNotEmpty
(
  	Matrix exprMatrix,
  	CSV geneNames,
  	CSV sampleGroups,
	record comparison,
	string sectionType,
	float cexRow,
	float cexCol
) -> (Latex report)
{
	groupExprG = IDConvert
	(
		csv              = exprMatrix,
		conversionTable  = geneNames,
		conversionColumn = "Gene",
		keyColumn        = "",
		unique           = true
	)
	
	// cannot compute stddev if expression is identical in all samples --> hclust chokes
	// add tiny amount of variability such that we can plot heatmap
	groupExprGCorr = REvaluate
	(
		table1 = groupExprG,
		script = StringInput(content=
			'''
			matr <- Matrix.read(get.input(cf, 'table1'))
			matr <- as.data.frame(matr)
			stdzero <- apply(matr, 1, sd) == 0
			if (sum(stdzero) > 0) {
				matr[stdzero,] <- matr[stdzero,] + matrix(runif(sum(stdzero)*length(matr))/1000, nrow=sum(stdzero))
			}
			table.out <- as.matrix(matr)
			'''
		)
	)
	
	sample2group = REvaluate
	(
		table1 = sampleGroups,
		table2 = exprMatrix,
		param1 = comparison.caseG + "," + comparison.controlG + "," + comparison.otherG,
		script = StringInput(content=
			"""
			groups=unlist(strsplit(param1, ","))
			table.out <- table1[table1$ID %in% groups, c("ID", "Members")]
			splitted <- strsplit(as.character(table.out$Members), ",")
			table.out <- data.frame(Sample=unlist(splitted), Grp=rep.int(table.out$ID, sapply(splitted, length)))
			unassigned <- colnames(table2[,-1])[!colnames(table2[,-1]) %in% table.out$Sample] 			    
			table.out <- rbind(table.out, data.frame(Sample=unassigned, Grp=rep.int("other", length(unassigned)))) # blank column name b/c of ugly label overlap in pheatmap
			table.out <- table.out[!duplicated(table.out$Sample),]
			""")
	)
	
	heatmap = HeatMapReport
	(
		force matr     = groupExprGCorr.table,
		colLabels      = sample2group.table,
		caption        = "Heatmap of DEGs between "+comparison.caseG+" and "+comparison.controlG+".",
		clusterMethod  = "average",
		distanceMetric = "correlation,euclidean",
		drawColnames   = true,
		drawLegends    = false,
		drawRownames   = true,
		marginCol      = 4,
		marginRow      = 2,
		plotHeight     = 13,
		plotWidth      = 11,
		scale          = "row",
		fontSizeCol    = 5,
		fontSizeRow    = 3,
		sectionTitle   = "Heatmap of genes differentially expressed between " + comparison.caseG + " and " + comparison.controlG,
		sectionType    = sectionType,
		width          = 16,
		colorScheme    = 'colorRampPalette(c("blue","white","red"))(255)',
		custom         = "border_color=NA,treeheight_row=150,treeheight_col=100,annotation_legend=T"
	)

	return heatmap.report
}

function getHeatmapReport
(
  	Matrix exprMatrix,
  	CSV degCalled,
  	CSV geneNames,
  	CSV sampleGroups,
	record comparison,
	string sectionType,
	float cexRow = 0.3,
	float cexCol = 1
) -> (Latex report)
{
	exprMatrixFiltered = CSVFilter
	(
		csv            = exprMatrix @require,
		auxiliary      = degCalled @require,
		//includeColumns = comparison.sampleIdLst,    // uncomment to see only samples of the two compared groups
		//includeColumns = "RowName",                 // uncomment to see only samples of the two compared groups
		colOrder       = true,
		@name          = "exprMatrixFiltered_" + std.quote(ID, type="Anduril")
	)                      

	geneCount = RowCount(exprMatrixFiltered, limit1=3)
	
	heatmapReport = switch geneCount 
	{
		case small = LatexCombiner
		(
			tail         = "No heatmap available because not enough significant DEGs.",
			sectionTitle = "Heatmap of genes differentially expressed between " + comparison.caseG + " and " + comparison.controlG,
			sectionType  = sectionType			
		)
		
		case medium = heatmapReportNotEmpty
		(
			exprMatrix   = exprMatrixFiltered,
			geneNames    = geneNames,
			sampleGroups = sampleGroups,
			comparison   = comparison,
			sectionType  = sectionType,
			cexRow       = cexRow,
			cexCol       = cexCol
		)
		
		case large = StringInput(content="dummy")

		return ExclusiveCombiner
		(
			item1A = small.document,  
			item2A = medium.report
		)
	}
	
	return heatmapReport.itemA
}	
