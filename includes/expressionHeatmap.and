function heatmapReportNotEmpty
(
  	Matrix exprMatrix,
  	CSV geneNames,
  	CSV samples,
  	CSV sampleGroups,
	record comparison,
	string sectionType,
	float fontSizeRow,
	float fontSizeCol,
	boolean includeOutgroup,
	string sampleAnnotationNames
) -> (Latex report)
{
	groupExprG = IDConvert
	(
		csv              = exprMatrix,
		conversionTable  = geneNames,
		conversionColumn = "Gene",
		keyColumn        = "",
		unique           = true
	)
	
	// cannot compute stddev if expression is identical in all samples --> hclust chokes
	// add tiny amount of variability such that we can plot heatmap
	groupExprGCorr = REvaluate
	(
		table1 = groupExprG,
		param1 = includeOutgroup,
		param2 = comparison.sampleIds,
		script = StringInput(content=
			'''
			matr <- Matrix.read(get.input(cf, 'table1'))
			if (param1 == "false") {
				matr <- matr[,colnames(matr) %in% unlist(strsplit(param2, ","))]
			}
			matr <- as.data.frame(matr)
			stdzero <- apply(matr, 1, sd) == 0
			if (sum(stdzero) > 0) {
				matr[stdzero,] <- matr[stdzero,] + matrix(runif(sum(stdzero)*length(matr))/1000, nrow=sum(stdzero))
			}
			table.out <- as.matrix(matr)
			'''
		)
	)
	
	sample2group = REvaluate
	(
		table1 = sampleGroups,
		table2 = groupExprGCorr.table,
		table3 = samples,
		param1 = comparison.caseG + "," + comparison.controlG + "," + comparison.otherG,
		param2 = sampleAnnotationNames,
		script = StringInput(content=
			"""
			array.out <- list()

			groups=unlist(strsplit(param1, ","))
			array.out[["groups"]] <- table1[table1$ID %in% groups, c("ID", "Members")]
			splitted <- strsplit(as.character(array.out[["groups"]]$Members), ",")
			array.out[["groups"]] <- data.frame(Sample=unlist(splitted), Grp=rep.int(array.out[["groups"]]$ID, sapply(splitted, length)))
			unassigned <- colnames(table2[,-1])[!colnames(table2[,-1]) %in% array.out[["groups"]]$Sample] 			    
			array.out[["groups"]] <- rbind(array.out[["groups"]], data.frame(Sample=unassigned, Grp=rep.int("other", length(unassigned)))) # blank column name b/c of ugly label overlap in pheatmap
			array.out[["groups"]] <- array.out[["groups"]][!duplicated(array.out[["groups"]]$Sample),]
			
			colors <- c("gray", "black", "red", "blue", "orange", "yellow", "lightgreen", "pink", "magenta", "darkgray", "lightblue")
			array.out[["colors"]] <- data.frame(Annotation="Grp", Value=unique(array.out[["groups"]]$Grp), Color=colors[1:length(unique(array.out[["groups"]]$Grp))])
			
			# add additional annotations if specified
			if (param2 != "") {
				array.out[["groups"]] <- merge(array.out[["groups"]], table3[,c("Alias", unlist(strsplit(param2, ",")))], by.x = "Sample", by.y = "Alias", all.x = TRUE)
				for (p in unlist(strsplit(param2, ","))) {
					array.out[["colors"]] <- rbind(array.out[["colors"]], data.frame(Annotation=p, Value=unique(array.out[["groups"]][,p]), Color=colors[1:length(unique(array.out[["groups"]][,p]))])) 
				}
			}
			
			table.out <- data.frame()
			""")
	)
	
	heatmap = HeatMapReport
	(
		force matr     = groupExprGCorr.table,
		colLabels      = sample2group.array["groups"],
		annColors      = sample2group.array["colors"],
		caption        = "Heatmap of genes differentially expressed between "+comparison.caseG+" and "+comparison.controlG+". Blue indicates low expression, red high.",
		clusterMethod  = "average",
		distanceMetric = "correlation,euclidean",
		drawColnames   = true,
		drawLegends    = false,
		drawRownames   = true,
		marginCol      = 4,
		marginRow      = 2,
		plotHeight     = 13,
		plotWidth      = 11,
		scale          = "row",
		fontSizeCol    = fontSizeCol,
		fontSizeRow    = fontSizeRow,
		sectionTitle   = "Heatmap of genes differentially expressed between " + comparison.caseG + " and " + comparison.controlG,
		sectionType    = sectionType,
		width          = 16,
		colorScheme    = 'colorRampPalette(c("blue","white","red"))(255)',
		custom         = "border_color=NA,treeheight_row=150,treeheight_col=100,annotation_legend=T"
	)

	return heatmap.report
}

function getHeatmapReport
(
  	Matrix exprMatrix,
  	CSV degCalled,
  	CSV geneNames,
  	CSV samples,
  	CSV sampleGroups,
	record comparison,
	string sectionType,
	float fontSizeRow = 3,
	float fontSizeCol = 5,
	boolean includeOutgroup = true,
	string sampleAnnotationNames = ""
) -> (Latex report)
{
	exprMatrixFiltered = CSVFilter
	(
		csv            = exprMatrix @require,
		auxiliary      = degCalled @require,
		//includeColumns = comparison.sampleIdLst,    // uncomment to see only samples of the two compared groups
		//includeColumns = "RowName",                 // uncomment to see only samples of the two compared groups
		colOrder       = true
	)                      

	geneCount = RowCount(exprMatrixFiltered, limit1=3)
	
	heatmapReport = switch geneCount 
	{
		case small = LatexCombiner
		(
			tail         = "No heatmap available because not enough significant DEGs.",
			sectionTitle = "Heatmap of genes differentially expressed between " + comparison.caseG + " and " + comparison.controlG,
			sectionType  = sectionType			
		)
		
		case medium = heatmapReportNotEmpty
		(
			exprMatrix            = exprMatrixFiltered,
			geneNames             = geneNames,
			samples               = samples,
			sampleGroups          = sampleGroups,
			comparison            = comparison,
			sectionType           = sectionType,
			fontSizeRow           = fontSizeRow,
			fontSizeCol           = fontSizeCol,
			includeOutgroup       = includeOutgroup,
			sampleAnnotationNames = sampleAnnotationNames
		)
		
		case large = StringInput(content="dummy")

		return ExclusiveCombiner
		(
			item1A = small.document,  
			item2A = medium.report
		)
	}
	
	return heatmapReport.itemA
}	
